{
  "ver": "1.0.27",
  "uuid": "8e79fab8-3da0-4f97-b9d6-6d2cb34c6e69",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D outTexture;\n#endif\nvec2 transform(vec2 texCoord,float theta,float zOffset)\n{\n  vec2 res = texCoord - 0.5;\n  res.x = res.x / cos(theta);\n  res.y = res.y / (1.0 - res.x * sin(theta));\n  res.x = res.x  / (1.0 - res.x * sin(theta));\n  res = res * (1.0 + zOffset);\n  res = res + 0.5;\n  return res;\n}\nvoid main()\n{\n  float t = abs(cos(cc_time.x));\n  float zOffset = 0.2 - abs(0.4*t - 0.2);\n  vec2 texCoordAfterTransform = transform(v_uv0, t*3.1415926, zOffset);\n  vec4 resColor = vec4(t,0.0,0.0,1.0);\n  vec4 texColor1 = texture2D(texture, texCoordAfterTransform);\n  vec4 texColor2 = texture2D(outTexture, vec2(1.0 - texCoordAfterTransform.x, texCoordAfterTransform.y));\n  if (t <= 0.5)\n      resColor = texColor1;\n  else\n      resColor = texColor2;\n  gl_FragColor = resColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D outTexture;\n#endif\nvec2 transform(vec2 texCoord,float theta,float zOffset)\n{\n  vec2 res = texCoord - 0.5;\n  res.x = res.x / cos(theta);\n  res.y = res.y / (1.0 - res.x * sin(theta));\n  res.x = res.x  / (1.0 - res.x * sin(theta));\n  res = res * (1.0 + zOffset);\n  res = res + 0.5;\n  return res;\n}\nvoid main()\n{\n  float t = abs(cos(cc_time.x));\n  float zOffset = 0.2 - abs(0.4*t - 0.2);\n  vec2 texCoordAfterTransform = transform(v_uv0, t*3.1415926, zOffset);\n  vec4 resColor = vec4(t,0.0,0.0,1.0);\n  vec4 texColor1 = texture(texture, texCoordAfterTransform);\n  vec4 texColor2 = texture(outTexture, vec2(1.0 - texCoordAfterTransform.x, texCoordAfterTransform.y));\n  if (t <= 0.5)\n      resColor = texColor1;\n  else\n      resColor = texColor2;\n  gl_FragColor = resColor;\n}"
      }
    }
  ],
  "subMetas": {}
}