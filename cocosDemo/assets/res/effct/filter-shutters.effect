// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        outTexture: { value: white ,editor: {tooltip: "变换纹理"}}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D outTexture;
  #endif

 float random(vec2 st) {
      return fract(sin(dot(st.xy,vec2(12.9898, 78.233))) * 43758.5453123);
  }

  void main () {
    vec4 texColor1 = texture(texture, v_uv0);
    vec4 texColor2 = texture(outTexture, v_uv0);
  
    vec4 resColor = vec4(cc_time.x,0.0,0.0,1.0);
    vec2 gridNum = vec2(55.0,42.0);
    float randomNum = random(floor(v_uv0.x * gridNum)/ gridNum);
    float randomNum2 = random(floor(v_uv0.y * gridNum)/ gridNum);
    if (cc_time.x <= randomNum )  //&& cc_time.x <= randomNum2
        resColor = texColor1;
    else
        resColor = texColor2;
        
    gl_FragColor = resColor;
  }
}%
