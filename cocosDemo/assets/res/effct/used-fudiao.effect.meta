{
  "ver": "1.0.27",
  "uuid": "9b7e16e5-4660-4aa7-8e99-8c96fb5541dd",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nconst highp vec3 transMatrix = vec3(1,1,1);\nconst vec4 bgColor = vec4(0.7, 0.6, 0, 1.0);\nvoid main () {\n  vec2 preUV = vec2(v_uv0.x+2.0/500.0, v_uv0.y+2.0/500.0);\n  vec4 currentMask = texture2D(texture, v_uv0);\n  vec4 preMask = texture2D(texture, preUV);\n  vec4 delColor = currentMask - preMask;\n  float luminance = dot(delColor.rgb, transMatrix);\n  gl_FragColor = vec4(vec3(luminance), 0.0) + bgColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nconst highp vec3 transMatrix = vec3(1,1,1);\nconst vec4 bgColor = vec4(0.7, 0.6, 0, 1.0);\nvoid main () {\n  vec2 preUV = vec2(v_uv0.x+2.0/500.0, v_uv0.y+2.0/500.0);\n  vec4 currentMask = texture2D(texture, v_uv0);\n  vec4 preMask = texture2D(texture, preUV);\n  vec4 delColor = currentMask - preMask;\n  float luminance = dot(delColor.rgb, transMatrix);\n  gl_FragColor = vec4(vec3(luminance), 0.0) + bgColor;\n}"
      }
    }
  ],
  "subMetas": {}
}